version: '3'

services:
  etcd:
    image: 'bitnami/etcd:latest'
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    #ports:
    #  - 2379:2379
    #  - 2380:2380
    volumes:
      - etcd_data:/bitnami
    networks:
      - frontend

  angulargo.api:
    image: angulargo-api:${TAG:-latest}
    build: 
      context: .
      dockerfile: ./src/services/api/Dockerfile
    command: --registry=etcd --register_interval=5 --register_ttl=10 --registry_address=etcd:2379
    depends_on:
      - etcd
      - angulargo.trending
    networks:
      - frontend
    restart: "unless-stopped"

  angulargo.trending:
    image: angulargo-trending:${TAG:-latest}
    build:
      context: .
      dockerfile: ./src/services/trending/Dockerfile
    command: --registry=etcd --register_interval=5 --register_ttl=10 --registry_address=etcd:2379
    depends_on: 
      - etcd    
      - angulargo.gather
      - "postgres.data"
      - "redis.data"
    networks:
      - frontend
      - backend
    restart: "unless-stopped"

  angulargo.gather:
    image: angulargo-gather:${TAG:-latest}
    build: 
      context: .
      dockerfile: ./src/services/gather/Dockerfile
    command: --registry=etcd --register_interval=5 --register_ttl=10 --registry_address=etcd:2379
    depends_on:
      - etcd
    networks:      
      - frontend
    restart: "unless-stopped"

  angulargo.schedule:
    image: angulargo-schedule:${TAG:-latest}
    build: 
      context: .
      dockerfile: ./src/services/schedule/Dockerfile
    command: --registry=etcd --register_interval=5 --register_ttl=10 --registry_address=etcd:2379
    depends_on:
      - etcd
      - angulargo.trending
    networks:      
      - frontend
    restart: "unless-stopped"

  postgres.data:
    image: postgres:alpine    
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-angulargo}
    volumes: 
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend  
    restart: "unless-stopped"

  redis.data:
   image: redis:alpine 
   networks:
      - backend     
   restart: "unless-stopped"

  micro.api:    
    command: --registry=etcd --registry_address=etcd:2379 api --handler=rpc
    environment:
      - VIRTUAL_HOST=${API_EXTERNAL_DNS_NAME_OR_IP}
    image: micro/micro:v2.0.0
    depends_on:      
      - angulargo.api
      - etcd
    ports:
      - "8080:8080"
    networks:
      - default
      - frontend
    restart: "unless-stopped"

volumes:
  etcd_data:
  postgres-data:

networks:
  default:    
  frontend:
  backend: