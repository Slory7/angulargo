version: '3'

services:
  consul-agent-1: &consul-agent
    image: consul:latest    
    command: "agent -retry-join consul-server-bootstrap -client 0.0.0.0"

  consul-agent-2:
    <<: *consul-agent

  consul-agent-3:
    <<: *consul-agent

  consul-server-1: &consul-server
    <<: *consul-agent
    command: "agent -server -retry-join consul-server-bootstrap -client 0.0.0.0"

  consul-server-2:
    <<: *consul-server

  consul-server-bootstrap:
    <<: *consul-agent
    ports:
      - "8400:8400"
      - "8500:8500"
      - "8600:8600"
      - "8600:8600/udp"
    command: "agent -server -bootstrap-expect 3 -ui -client 0.0.0.0"

  angulargo.api:
    image: angulargo-api:${TAG:-latest}
    build: 
      context: .
      dockerfile: ./src/services/api/Dockerfile
    command: --registry_address=consul-server-bootstrap:8500
    links:
      - consul-server-bootstrap
      - angulargo.trending
    restart: "unless-stopped"

  angulargo.trending:
    image: angulargo-trending:${TAG:-latest}
    build:
      context: .
      dockerfile: ./src/services/trending/Dockerfile
    command: --registry_address=consul-server-bootstrap:8500
    links:
      - consul-server-bootstrap
      - angulargo.gather      
    restart: "unless-stopped"
    depends_on:     
     - "postgres.data"
     - "redis.data"

  angulargo.gather:
    image: angulargo-gather:${TAG:-latest}
    build: 
      context: .
      dockerfile: ./src/services/gather/Dockerfile
    command: --registry_address=consul-server-bootstrap:8500
    links:
      - consul-server-bootstrap     
    restart: "unless-stopped"

  angulargo.schedule:
    image: angulargo-schedule:${TAG:-latest}
    build: 
      context: .
      dockerfile: ./src/services/schedule/Dockerfile
    command: --registry_address=consul-server-bootstrap:8500
    links:
      - consul-server-bootstrap
      - angulargo.trending
    restart: "unless-stopped"

  postgres.data:
    image: postgres:alpine    
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=angulargo
    restart: "unless-stopped"

  redis.data:
   image: redis:alpine 
   restart: "unless-stopped"

  micro:    
    command: --registry_address=consul-server-bootstrap:8500  api --handler=rpc
    environment:
      - VIRTUAL_HOST=${API_EXTERNAL_DNS_NAME_OR_IP}
    image: microhq/micro:latest
    links:
      - consul-server-bootstrap
      - angulargo.api
    ports:
      - "8080:8080"

networks:
  default:
    external:
      name: ${NETWORK-angulargo_consul_default}