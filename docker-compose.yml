version: '3.5'

services:
  angulargo.api:
    image: angulargo-api:${TAG:-latest}
    build:
      context: .
      dockerfile: ./src/services/api/Dockerfile
    command: --registry=etcd --register_interval=5 --register_ttl=10 --registry_address=angulargo.etcd:2379
    environment:
      - VIRTUAL_HOST=${API_EXTERNAL_DNS_NAME_OR_IP}
    volumes:
      - /home/certs:/etc/ssl/certs
    depends_on:
      - angulargo.etcd
      - angulargo.trending
    ports:
      - "80:8010"
    networks:
      - frontend
      - default
    restart: "unless-stopped"

  angulargo.trending:
    image: angulargo-trending:${TAG:-latest}
    build:
      context: .
      dockerfile: ./src/services/trending/Dockerfile
    command: --registry=etcd --register_interval=5 --register_ttl=10 --registry_address=angulargo.etcd:2379
    depends_on:
      - angulargo.etcd
      - angulargo.gather
      - "postgres.data"
      - "redis.data"
    networks:
      - frontend
      - backend
    restart: "unless-stopped"

  angulargo.gather:
    image: angulargo-gather:${TAG:-latest}
    build:
      context: .
      dockerfile: ./src/services/gather/Dockerfile
    command: --registry=etcd --register_interval=5 --register_ttl=10 --registry_address=angulargo.etcd:2379
    depends_on:
      - angulargo.etcd
    networks:
      - frontend
    restart: "unless-stopped"

  angulargo.schedule:
    image: angulargo-schedule:${TAG:-latest}
    build:
      context: .
      dockerfile: ./src/services/schedule/Dockerfile
    command: --registry=etcd --register_interval=5 --register_ttl=10 --registry_address=angulargo.etcd:2379
    depends_on:
      - angulargo.etcd
      - angulargo.trending
    networks:
      - frontend
    restart: "unless-stopped"

  angulargo.api.web:
    image: angulargo-api-web:${TAG:-latest}
    build:
      context: .
      dockerfile: ./src/services/api/cmd/web/Dockerfile
    command: --grpcserveraddress=angulargo.api
    environment:
      - VIRTUAL_HOST=${WEB_EXTERNAL_DNS_NAME_OR_IP}
      - HTTP_PORT=81
    volumes:
      - /home/certs:/etc/ssl/certs
    depends_on:
      - angulargo.api
    ports:
      - "81:8011"
    networks:
      - default
    restart: "unless-stopped"

  angulargo.api.webgrpc:
    image: 'casperlabs/grpcwebproxy'
    command: --backend_addr=angulargo.api --allow_all_origins --run_tls_server=false
    environment:
      - VIRTUAL_HOST=${WEBGRPC_EXTERNAL_DNS_NAME_OR_IP}
      - HTTP_PORT=82
    volumes:
      - /home/certs:/etc/ssl/certs
    depends_on:
      - angulargo.api
    ports:
      - "82:8080"
    networks:
      - default
    restart: "unless-stopped"

  angulargo.etcd:
    image: 'bitnami/etcd:latest'
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://angulargo.etcd:2379
    #ports:
    #  - 2379:2379
    #  - 2380:2380
    volumes:
      - etcd_data:/bitnami
    networks:
      - default
      - frontend
    restart: "unless-stopped"

  postgres.data:
    image: postgres:alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-angulargo}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    restart: "unless-stopped"

  redis.data:
    image: redis:alpine
    networks:
      - backend
    restart: "unless-stopped"

volumes:
  etcd_data:
  postgres-data:

networks:
  default:
    name: ${PROJECT_NAME:-angulargo}_a_default
  frontend:
    name: ${PROJECT_NAME:-angulargo}_b_frontend
  backend:
    name: ${PROJECT_NAME:-angulargo}_c_backend
