// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	trending "github.com/slory7/angulargo/src/proto/trending"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Api service

func NewApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Api service

type ApiService interface {
	GetGithubTrending(ctx context.Context, in *trending.Request, opts ...client.CallOption) (*trending.GithubTrendingInfo, error)
}

type apiService struct {
	c    client.Client
	name string
}

func NewApiService(name string, c client.Client) ApiService {
	return &apiService{
		c:    c,
		name: name,
	}
}

func (c *apiService) GetGithubTrending(ctx context.Context, in *trending.Request, opts ...client.CallOption) (*trending.GithubTrendingInfo, error) {
	req := c.c.NewRequest(c.name, "Api.GetGithubTrending", in)
	out := new(trending.GithubTrendingInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiHandler interface {
	GetGithubTrending(context.Context, *trending.Request, *trending.GithubTrendingInfo) error
}

func RegisterApiHandler(s server.Server, hdlr ApiHandler, opts ...server.HandlerOption) error {
	type api interface {
		GetGithubTrending(ctx context.Context, in *trending.Request, out *trending.GithubTrendingInfo) error
	}
	type Api struct {
		api
	}
	h := &apiHandler{hdlr}
	return s.Handle(s.NewHandler(&Api{h}, opts...))
}

type apiHandler struct {
	ApiHandler
}

func (h *apiHandler) GetGithubTrending(ctx context.Context, in *trending.Request, out *trending.GithubTrendingInfo) error {
	return h.ApiHandler.GetGithubTrending(ctx, in, out)
}
