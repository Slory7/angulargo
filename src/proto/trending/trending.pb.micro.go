// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: trending/trending.proto

package trending

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Trending service

func NewTrendingEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Trending service

type TrendingService interface {
	// Get trending
	GetGithubTrending(ctx context.Context, in *Request, opts ...client.CallOption) (*GithubTrendingInfo, error)
	// Fetch today's trending from web
	FetchGithubTrending(ctx context.Context, in *Empty, opts ...client.CallOption) (*GithubTrendingInfo, error)
	// Get today's trending, if not exists, fetch and save it
	GetAndSaveGithubTrending(ctx context.Context, in *Empty, opts ...client.CallOption) (*GithubTrendingInfo, error)
}

type trendingService struct {
	c    client.Client
	name string
}

func NewTrendingService(name string, c client.Client) TrendingService {
	return &trendingService{
		c:    c,
		name: name,
	}
}

func (c *trendingService) GetGithubTrending(ctx context.Context, in *Request, opts ...client.CallOption) (*GithubTrendingInfo, error) {
	req := c.c.NewRequest(c.name, "Trending.GetGithubTrending", in)
	out := new(GithubTrendingInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendingService) FetchGithubTrending(ctx context.Context, in *Empty, opts ...client.CallOption) (*GithubTrendingInfo, error) {
	req := c.c.NewRequest(c.name, "Trending.FetchGithubTrending", in)
	out := new(GithubTrendingInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendingService) GetAndSaveGithubTrending(ctx context.Context, in *Empty, opts ...client.CallOption) (*GithubTrendingInfo, error) {
	req := c.c.NewRequest(c.name, "Trending.GetAndSaveGithubTrending", in)
	out := new(GithubTrendingInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trending service

type TrendingHandler interface {
	// Get trending
	GetGithubTrending(context.Context, *Request, *GithubTrendingInfo) error
	// Fetch today's trending from web
	FetchGithubTrending(context.Context, *Empty, *GithubTrendingInfo) error
	// Get today's trending, if not exists, fetch and save it
	GetAndSaveGithubTrending(context.Context, *Empty, *GithubTrendingInfo) error
}

func RegisterTrendingHandler(s server.Server, hdlr TrendingHandler, opts ...server.HandlerOption) error {
	type trending interface {
		GetGithubTrending(ctx context.Context, in *Request, out *GithubTrendingInfo) error
		FetchGithubTrending(ctx context.Context, in *Empty, out *GithubTrendingInfo) error
		GetAndSaveGithubTrending(ctx context.Context, in *Empty, out *GithubTrendingInfo) error
	}
	type Trending struct {
		trending
	}
	h := &trendingHandler{hdlr}
	return s.Handle(s.NewHandler(&Trending{h}, opts...))
}

type trendingHandler struct {
	TrendingHandler
}

func (h *trendingHandler) GetGithubTrending(ctx context.Context, in *Request, out *GithubTrendingInfo) error {
	return h.TrendingHandler.GetGithubTrending(ctx, in, out)
}

func (h *trendingHandler) FetchGithubTrending(ctx context.Context, in *Empty, out *GithubTrendingInfo) error {
	return h.TrendingHandler.FetchGithubTrending(ctx, in, out)
}

func (h *trendingHandler) GetAndSaveGithubTrending(ctx context.Context, in *Empty, out *GithubTrendingInfo) error {
	return h.TrendingHandler.GetAndSaveGithubTrending(ctx, in, out)
}
