// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/gather.proto

/*
Package gather is a generated protocol buffer package.

It is generated from these files:
	proto/gather.proto

It has these top-level messages:
	Request
	Result
*/
package gather

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Gather service

type GatherService interface {
	GetHttpContent(ctx context.Context, in *Request, opts ...client.CallOption) (*Result, error)
}

type gatherService struct {
	c    client.Client
	name string
}

func NewGatherService(name string, c client.Client) GatherService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gather"
	}
	return &gatherService{
		c:    c,
		name: name,
	}
}

func (c *gatherService) GetHttpContent(ctx context.Context, in *Request, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "Gather.GetHttpContent", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gather service

type GatherHandler interface {
	GetHttpContent(context.Context, *Request, *Result) error
}

func RegisterGatherHandler(s server.Server, hdlr GatherHandler, opts ...server.HandlerOption) error {
	type gather interface {
		GetHttpContent(ctx context.Context, in *Request, out *Result) error
	}
	type Gather struct {
		gather
	}
	h := &gatherHandler{hdlr}
	return s.Handle(s.NewHandler(&Gather{h}, opts...))
}

type gatherHandler struct {
	GatherHandler
}

func (h *gatherHandler) GetHttpContent(ctx context.Context, in *Request, out *Result) error {
	return h.GatherHandler.GetHttpContent(ctx, in, out)
}
